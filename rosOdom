#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist, Point, Quaternion, Pose
from nav_msgs.msg import Odometry 
import argparse

class odom_converter:
    def __init__(self, topic):
        self.topic = topic
        self.odom_sub = rospy.Subscriber(self.topic, Odometry, self.callback)
        fname='odom.txt'
        self.fobj=open(fname,'w')    
    
    def callback(self, msg):
        #convert image to opencv
        try:
            # cv_image = self.bridge.imgmsg_to_cv2(msg, "bgr8")
            timestr = "%.6f" %  msg.header.stamp.to_sec()
            x = "%.6f" % msg.pose.pose.position.x
            y = "%.6f" % msg.pose.pose.position.y
            z = "%.6f" % msg.pose.pose.position.z
            q0 = "%.6f" % msg.pose.pose.orientation.x
            q1 = "%.6f" % msg.pose.pose.orientation.y
            q2 = "%.6f" % msg.pose.pose.orientation.z
            w = "%.6f" % msg.pose.pose.orientation.w
            print(timestr )
            # print(timestr, "x" ,x ,"y" ,y , "z",  z ,"q0" ,q0 ,"q1", q1 ,"q2" ,q2 ,"w" , w )
            self.fobj.write(timestr + ' '+ x + ' ' + y + ' '+ z +'\n')
            self.fobj.flush() 

        except :
            print ("Could not  ros message to  word: ")
            return

    def _del_(self): 
        self.fobj.close() 
        print ("save odom")


if __name__ == "__main__":    
    parser = argparse.ArgumentParser(description='Validate the intrinsics of a camera.')
    parser.add_argument('topic', nargs='+', dest='topics', help='odmo topic', required=True)
    parsed = parser.parse_args()

    for topic in parsed.topics:
        camval = odom_converter(topic) 
        print(topic)
    
    rospy.init_node('rosodom', anonymous=True)
    try:
        rospy.spin()
    except KeyboardInterrupt:
        del camval
        print ("Shutting down")
