#!/usr/bin/env python
print "importing libraries"

import rosbag
import rospy
from sensor_msgs.msg import Image ,CameraInfo ,Imu
import ImageFile
import time, sys, os
import argparse
import cv2
import numpy as np
import csv
import yaml

#structure
# dataset/cam0/TIMESTAMP.png
# dataset/camN/TIMESTAMP.png
# dataset/imu.csv

#setup the argument list
parser = argparse.ArgumentParser(description='Create a ROS bag using the images and imu data.')
parser.add_argument('--folder',  metavar='folder', nargs='?', help='Data folder')
parser.add_argument('--output-bag', metavar='output_bag',  default="output.bag", help='ROS bag file %(default)s')

#print help if no argument is specified
if len(sys.argv)<2:
    parser.print_help()
    sys.exit(0)

#parse the args
parsed = parser.parse_args()

def getImageFilesFromDir(dir):
    '''Generates a list of files from the directory'''
    image_files = list()
    timestamps = list()
    if os.path.exists(dir):
        for path, names, files in os.walk(dir):
            for f in files:
                if os.path.splitext(f)[1] in ['.bmp', '.png', '.jpg']:
                    image_files.append( os.path.join( path, f ) )
                    timestamps.append(os.path.splitext(f)[0]) 
    #sort by timestamp
    sort_list = sorted(zip(timestamps, image_files))
    image_files = [file[1] for file in sort_list]
    return image_files

def getCamFoldersFromDir(dir):
    '''Generates a list of all folders that start with cam e.g. cam0'''
    cam_folders = list()
    if os.path.exists(dir):
        for path, folders, files in os.walk(dir):
            for folder in folders:                
                if folder[0:3] == "cam":
                    cam_folders.append(folder)
    return cam_folders


def loadImageToRosMsg(filename):
    image_np = cv2.imread(filename, cv2.IMREAD_GRAYSCALE)
    
    timestamp_nsecs = os.path.splitext(os.path.basename(filename))[0]
    timestamp = rospy.Time( secs=int(timestamp_nsecs[0:10]), nsecs=1000 * int(timestamp_nsecs[-6:]) )

    rosimage = Image()
    rosimage.header.stamp = timestamp
    rosimage.height = image_np.shape[0]
    rosimage.width = image_np.shape[1]
    rosimage.step = rosimage.width  #only with mono8! (step = width * byteperpixel * numChannels)
    rosimage.encoding = "mono8"
    rosimage.data = image_np.tostring()

    return rosimage,timestamp



if __name__ == "__main__":
    print("aaaaaaaaaaaaa")

    parser = argparse.ArgumentParser(description='Create a ROS bag using the images and imu data.')
    parser.add_argument('--folder',  metavar='folder', nargs='?', help='Data folder')
    parser.add_argument('--output', metavar='output',  default="output.bag", help='ROS bag file %(default)s')

    camfolders = getCamFoldersFromDir(parsed.folder)
    for camfolder in camfolders:
        camdir = parsed.folder + "/{0}".format(camfolder)
        image_files = getImageFilesFromDir(camdir)

    with rosbag.Bag(parsed.output, 'r') as bag:  #要读取的bag文件；
            index = 0
            for topic,msg,t in bag.read_messages():
                if topic == "/camera/image_raw": #图像的topic；
                    try:
                        cv_image = self.bridge.imgmsg_to_cv2(msg,"mono8"）
                    except CvBridgeError as e:
                        print e

                if topic == "/velodyne_points": #图像的topic；
                    timestr = msg.header.stamp
                    image_msg, roscamerainfo,timestamp = loadImageToRosMsg(image_files[index])
                    bag.write("/{0}/image_raw".format(camfolder), image_msg, timestamp)
                    index =  index + 1;
                    print(index)

 


                        



